//
//  Decorator.swift
//  PatternDesign
//
//  Created by Алексей on 22.04.2018.
//  Copyright © 2018 Алексей. All rights reserved.
//

// + Оборачивает в обертку дополняя старый функционал
// + Позволяет обходить класс типа final
// + Большая гибкость, чем у наследования.
// + Можно добавлять несколько новых обязанностей сразу
// + Позволяет иметь несколько мелких объектов вместо одного объекта на все случаи жизни
// - Трудно конфигурировать многократно обёрнутые объекты
// - Обилие крошечных классов

// MARK: Main protocol from decorator
// в протоколе может быть несколько методов для реализации, например протокол для чтение и записи данных
protocol Notification {
    func send(message: String)
}
